#General parameters
[General]
network = networks.${net = single_cache }_network

simtime-scale=-8

repeat = 10
seed-set = ${repetition}

#####################################################################
########################  Repositories ##############################
#####################################################################
## (In the case of standard topologies, like tree or cascades, 
## repositories are placed within the corresponding ned file.
## Indicates which node is a repository (leave blank for random positioning)
**.node_repos = ""
## Indicates how many repositories there are inside the network
**.num_repos  = ${numRepos = 1 }
## Indicates in how many (random) repositories the seed copy of a given content is replicated.
**.replicas = 1

#####################################################################
##########################  Clients  ################################
#####################################################################
## (In the case of standard topologies, like tree or cascades, 
## clients are placed within the corresponding ned file.
## Indicates which node is a client (leave blank for random positioning)
**.node_clients = ""
## Indicates how many clients there are inside the network
**.num_clients = ${numClients = 1 }
## Arrival request rate at each client
**.lambda = ${lam = 20.0 }
## The RTT is used to trigger retransmissions (usually, RTT >> N_D*d, where N_D is the network diameter, and d is the average delay on a link)
**.RTT = 2
## Timer indicating how often the state of a content download is checked. 
**.check_time = 5
## Indicates the type of the simulated clients: Independent Request Model (IRM) (other options, like ShotNoise or Window are still in alpha version) 
**.client_type = "client_${clientType = IRM }"

## Client window parameters (Client with transmission window)
**.defWinSize = 1
**.maxWinSize = 10
**.dropProb = 0.01

#####################################################################
###################  Content Distribution ###########################
#####################################################################
## Average size of a content (# chunks). Content size is exponentially distributed.
**.file_size =  1
## Shaping factor of the Zipf's distribution
**.alpha = ${alp = 1 }
## Plateau of the MZipf distribution
**.q = 0
## Cardinality of the catalog.
**.objects = ${totCont = 1000000 }
## Percentile after which the catalog is aggregated (e.g., 90-th percentile = 0.9. Not useful)
**.perc_aggr = ${catAggr = 1.0 }
## Percentile after which 'per file' statistics are not gathered. 
**.stat_aggr = 0.5
## Content distribution type: IRM, ShotNoiseContentDistribution (Still alpha version; please comment this line if using IRM)
**.content_distribution_type = "${contDistrType = content_distribution }"

#####################################################################
##########################  Forwarding ##############################
#####################################################################
## Strategy layer (interest forwarding): 
## - spr: Shortest Path Strategy. Interest packets are sent toward the closest repository (in terms of #hops count)
## - nrr1: Nearest Replica Routing (one phase)
## - nrr:  Nearest Replica Routing (two phases)
## - random_repository: Interest packets are sent toward one random repository (among those who store the requested content)
## - parallel_repository: Interest packets are sent toward all the repositories which store the requested content.
**.FS = "${ fs = spr }"
**.TTL2 = ${ttl = 1000}
**.TTL1= ${ttl}
**.routing_file = ""

#####################################################################
##########################  Caching  ################################
#####################################################################
## Mets-Caching algorithms: fixP, lce , no_cache , lcd, btw, prob_cache, two_lru, two_ttl (only for TTL-based scenario)
**.DS = "${ mc = lce }"
## Replacement strategies: {lru,lfu,fifo,two,random}_cache
**.RS = "${ rs = lru }_cache"
## Cache size (#chunks)
**.C = ${cDim = 10000 }
## Name cache size (#content IDs). Used only with two_lru meta-caching.
**.NC = ${ncDim = 0 }
## Name of the file containing Tc values (only for TTL-based scenario)
**.tc_file = "${ tcf = ./Tc_Values/tc_single_cache_NumCl_1_NumRep_1_FS_spr_MC_lce_M_1e6_R_1e4_C_1e3_Lam_20.0.txt }"
## Name of the file containing Tc values of the Name Cache (in case of 2-LRU, only for TTL-based scenario)
**.tc_name_file = "${ tcnf = ./tc_name_single_cache }"

#####################################################################
########################  Statistics ################################
#####################################################################
## Time window for the stability checking
**.window = 100
## Sampling time 
**.ts = 20
##Ex: in this case every 2000 secs a stabilization checks is executed. Every 20 sec a sample is collected. 
##    Thus, the stabilization is checked every 100/20=5 samples.

## Proportion of nodes for which FULL and STABILITY check is executed.
## Ex: partial_n = 0.5 --> Statistics are collected only after 50% of nodes have been declared stable (after having filled their cached) 
## Ex: partial_n = 1.0 --> Statistics are collected only after ALL nodes have been declared stable (after having filled their cached) 
**.partial_n = ${checkedNodes = 0.75 }

## A cache is considered stable if the last N samples show variance smaller than this threshold
**.variance_threshold = ${variance = 0.0001 }

## A cache is considered stable if the last N samples show coefficient of variation (CV) smaller than this threshold (NEW)
**.cvThr = ${cv = 0.05 }

## A cache is considered stable if the last N samples show coefficient of variation (CV) smaller than this threshold (NEW)
**.consThr = ${cons = 0.1 }


##Time of simulation after the stabilization
**.steady = ${steady = 50000 }

##Start Mode (i.e., 'hot' or 'cold' start, meaning full/empty caches)
**.start_mode = "${startMode = cold }"

##Fill Mode, i.e., 'naive' or 'model' filling. It is used in case a "hot" start mode has been selected
## naive = caches are filled with the most popular contents;
## model = caches are filled according to the result of the model solver [2]
**.fill_mode = "${fill = naive }"

##Only model: flag indicating if the simulation stops after the execution of the model solver; it is used only with
## the combination "hot+model". E.g., onlyModel = false means that the simulations starts after that caches are filled
## with the top 'C' popular contents (where C = cache dim) calculated by the model solver for each node. Otherwise, the
## simulations ends after the execution of the model solver. 
**.onlyModel = ${onlyMod = true }

## Downsizing factor: in normal simulation down = 1. In TTL-based scaled scenario, down > 1 (i.e., newCatalog = Catalog / down)
**.downsize = ${down = 1 }

**.interest_aggregation = ${intAggr = false }

#####################################################################
###############  Strategy Layer (link failure) ######################
#####################################################################
## Scheduled time for the failure
**.fail_time = ${failTime = 50000 }
**.fail_duration = ${failDuration = 200 }
**.fail_transient = ${failTransient = 5000 }
**.fail_scenario = ${failScenario = false }

#####################################################################
###############  Core Layer (Link Load Evaluation) ##################
#####################################################################
**.llEval = ${boolEval = false }
**.maxInterval = ${evalInterval = 10.0 }
# Datarate [1Mbps] (so far fixed and equal for all links) 
**.datarate = ${linkrate = 1000000 }


#####################################################################
########################  Shot Noise Model ##########################
#####################################################################

# Configuration File for the Shot Noise model [1] 
**.shot_noise_file = "ShotNoiseScenario.txt" 

# Multiplicative factor for the Toff (e.g., Toff = k * Ton)
**.toff_mult_factor = ${ koff = 9 }

# Number of requests that users want to simulate
**.num_tot_req= ${ totReq = 1e9 }


## OUTPUT FILES
output-vector-file = ${resultdir}/ED_T_${numClients}_${numRepos}_${fs}_${mc}_${rs}_${cDim}_${ncDim}_${totCont}_${totReq}_${lam}_${alp}_${clientType}_${koff}_${startMode}_${fill}_${checkedNodes}_${down}_run=${repetition}.vec
output-scalar-file = ${resultdir}/ED_T_${numClients}_${numRepos}_${fs}_${mc}_${rs}_${cDim}_${ncDim}_${totCont}_${totReq}_${lam}_${alp}_${clientType}_${koff}_${startMode}_${fill}_${checkedNodes}_${down}_run=${repetition}.sca
eventlog-file = ${resultdir}/ED_T_${numClients}_${numRepos}_${fs}_${mc}_${rs}_${cDim}_${ncDim}_${totCont}_${totReq}_${lam}_${alp}_${clientType}_${koff}_${startMode}_${fill}_${checkedNodes}_${down}_run=${repetition}.elog
snapshot-file = ${resultdir}/ED_T_${numClients}_${numRepos}_${fs}_${mc}_${rs}_${cDim}_${ncDim}_${totCont}_${totReq}_${lam}_${alp}_${clientType}_${koff}_${startMode}_${fill}_${checkedNodes}_${down}_run=${repetition}.sna

# References
# [1] S. Traverso et al., Unravelling the Impact of Temporal and Geographical Locality in Content Caching Systems. IEEE Transactions on Multimedia 17(10): 1839-1854 (2015).
# [2] V. Martina, M. Garetto, and E. Leonardi, A unified approach to the performance analysis of caching systems. in Proc. of IEEE INFOCOM 2014.
